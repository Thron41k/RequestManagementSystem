//IAuthService.cs
using RequestManagement.Common.Models;
using RequestManagement.Common.Models.Enums;

namespace RequestManagement.Common.Interfaces;

/// <summary>
/// Интерфейс сервиса авторизации
/// </summary>
public interface IAuthService
{
    /// <summary>
    /// Аутентифицирует пользователя по логину и паролю
    /// </summary>
    /// <param name="login">Логин пользователя</param>
    /// <param name="password">Пароль пользователя</param>
    /// <returns>Модель пользователя при успешной аутентификации или null, если аутентификация не удалась</returns>
    Task<User> AuthenticateAsync(string login, string password);

    /// <summary>
    /// Проверяет, имеет ли пользователь права на выполнение действия
    /// </summary>
    /// <param name="userId">Идентификатор пользователя</param>
    /// <param name="requiredRole">Требуемая роль для действия</param>
    /// <returns>Признак наличия прав</returns>
    Task<bool> AuthorizeAsync(int userId, UserRole requiredRole);
}

//ICommissionsService.cs
using RequestManagement.Common.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Interfaces
{
    public interface ICommissionsService
    {
        Task<List<Commissions>> GetAllCommissionsAsync(string filter = "");
        Task<int> CreateCommissionsAsync(Commissions warehouse);
        Task<bool> UpdateCommissionsAsync(Commissions warehouse);
        Task<bool> DeleteCommissionsAsync(int id);
    }
}


//IDefectService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface IDefectService
{
    Task<List<DefectGroup>> GetAllDefectGroupsAsync(string filter = "");
    Task<int> CreateDefectGroupAsync(DefectGroup defectGroup);
    Task<bool> UpdateDefectGroupAsync(DefectGroup defectGroup);
    Task<bool> DeleteDefectGroupAsync(int id);

    Task<List<Defect>> GetAllDefectsAsync(string filter = "");
    Task<int> CreateDefectAsync(Defect defect);
    Task<bool> UpdateDefectAsync(Defect defect);
    Task<bool> DeleteDefectAsync(int id);
}

//IDriverService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface IDriverService
{
    Task<List<Driver>> GetAllDriversAsync(string filter = "");
    Task<int> CreateDriverAsync(Driver driver);
    Task<bool> UpdateDriverAsync(Driver driver);
    Task<bool> DeleteDriverAsync(int id);
}

//IEquipmentService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface IEquipmentService
{
    Task<int> CreateEquipmentAsync(Equipment equipment);
    Task<bool> UpdateEquipmentAsync(Equipment equipment);
    Task<bool> DeleteEquipmentAsync(int id);
    Task<List<Equipment>> GetAllEquipmentAsync(string filter = "");
}

//IExpenseService.cs
using RequestManagement.Common.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WpfClient.Models;

namespace RequestManagement.Common.Interfaces
{
    public interface IExpenseService
    {
        Task<Expense> CreateExpenseAsync(Expense expense);
        Task<bool> UpdateExpenseAsync(Expense expense);
        Task<bool> DeleteExpenseAsync(int id);
        Task<UserLastSelection?> GetUserLastSelectionAsync(int userId);
        Task<NomenclatureDefectMapping?> GetLastNomenclatureDefectMappingAsync(int userId, int nomenclatureId);
        Task SaveUserLastSelectionAsync(int userId, int? driverId, int? equipmentId);
        Task SaveNomenclatureDefectMappingAsync(int userId, int stockId, int defectId, int term);
        Task<bool> DeleteExpensesAsync(List<int> requestId);
        Task<List<Expense>> GetAllExpensesAsync(string requestFilter, int requestWarehouseId, int requestEquipmentId, int requestDriverId, int requestDefectId, string requestFromDate, string requestToDate);
        Task<bool> UploadMaterialsExpenseAsync(List<MaterialExpense>? materials, int warehouseId);
    }
}


//IIncomingService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces
{
    public interface IIncomingService
    {
        Task<Incoming> CreateIncomingAsync(Incoming incoming);
        Task<bool> UpdateIncomingAsync(Incoming expense);
        Task<bool> DeleteIncomingAsync(int id);
        Task<bool> DeleteIncomingsAsync(List<int> requestId);
        Task<List<Incoming>> GetAllIncomingsAsync(string requestFilter, int requestWarehouseId, string requestFromDate, string requestToDate);
        Task<bool> UploadIncomingsAsync(MaterialIncoming incoming);
    }
}


//INomenclatureAnalogService.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces
{
    public interface INomenclatureAnalogService
    {
        Task<List<Nomenclature>> GetAllNomenclatureAnalogsAsync(int filter);
        Task<int> AddNomenclatureAnalogAsync(NomenclatureAnalog nomenclatureAnalog);
        Task<bool> DeleteNomenclatureAnalogAsync(int originalId, int analogId);
    }
}


//INomenclatureService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface INomenclatureService
{
    Task<List<Nomenclature>> GetAllNomenclaturesAsync(string filter = "");
    Task<int> CreateNomenclatureAsync(Nomenclature nomenclature);
    Task<bool> UpdateNomenclatureAsync(Nomenclature nomenclature);
    Task<bool> DeleteNomenclatureAsync(int id);
}

//IRequestService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface IRequestService
{
    Task<int> CreateEquipmentAsync(Equipment equipment);
    Task<bool> UpdateEquipmentAsync(Equipment equipment);
    Task<bool> DeleteEquipmentAsync(int id);
    Task<List<Equipment>> GetAllEquipmentAsync(string filter = "");

    Task<List<Driver>> GetAllDriversAsync(string filter = "");
    Task<int> CreateDriverAsync(Driver driver);
    Task<bool> UpdateDriverAsync(Driver driver);
    Task<bool> DeleteDriverAsync(int id);

    Task<List<DefectGroup>> GetAllDefectGroupsAsync(string filter = "");
    Task<int> CreateDefectGroupAsync(DefectGroup driver);
    Task<bool> UpdateDefectGroupAsync(DefectGroup driver);
    Task<bool> DeleteDefectGroupAsync(int id);

    Task<List<Defect>> GetAllDefectsAsync(string filter = "");
    Task<int> CreateDefectAsync(Defect driver);
    Task<bool> UpdateDefectAsync(Defect driver);
    Task<bool> DeleteDefectAsync(int id);

    Task<List<Nomenclature>> GetAllNomenclaturesAsync(string filter = "");
    Task<int> CreateNomenclatureAsync(Nomenclature nomenclature);
    Task<bool> UpdateNomenclatureAsync(Nomenclature nomenclature);
    Task<bool> DeleteNomenclatureAsync(int id);
}

//IStockService.cs
using RequestManagement.Common.Models;
using WpfClient.Models;

namespace RequestManagement.Common.Interfaces;

public interface IStockService
{
    Task<int> CreateStockAsync(Stock stock);
    Task<bool> UpdateStockAsync(Stock stock);
    Task<bool> DeleteStockAsync(int id);
    Task<List<Stock>> GetAllStocksAsync(int warehouseId,
        string filter = "",
        int initialQuantityFilterType = 0,
        double initialQuantityFilter = 0,
        int receivedQuantityFilterType = 0,
        double receivedQuantityFilter = 0,
        int consumedQuantityFilterType = 0,
        double consumedQuantityFilter = 0,
        int finalQuantityFilterType = 0,
        double finalQuantityFilter = 0
        );
    Task<bool> UploadMaterialsStockAsync(List<MaterialStock>? materials, int warehouseId, DateTime date);
}

//IUserService.cs
using RequestManagement.Common.Models;
using RequestManagement.Common.Models.Enums;

namespace RequestManagement.Common.Interfaces;

/// <summary>
/// Интерфейс сервиса для работы с пользователями
/// </summary>
public interface IUserService
{
    /// <summary>
    /// Создает нового пользователя
    /// </summary>
    /// <param name="user">Модель пользователя для создания</param>
    /// <returns>Идентификатор созданного пользователя</returns>
    Task<int> CreateUserAsync(User user);

    /// <summary>
    /// Обновляет данные пользователя
    /// </summary>
    /// <param name="user">Обновленная модель пользователя</param>
    /// <returns>Признак успешного обновления</returns>
    Task<bool> UpdateUserAsync(User user);

    /// <summary>
    /// Удаляет пользователя по идентификатору
    /// </summary>
    /// <param name="userId">Идентификатор пользователя</param>
    /// <returns>Признак успешного удаления</returns>
    Task<bool> DeleteUserAsync(int userId);

    /// <summary>
    /// Получает пользователя по идентификатору
    /// </summary>
    /// <param name="userId">Идентификатор пользователя</param>
    /// <returns>Модель пользователя или null, если пользователь не найден</returns>
    Task<User> GetUserByIdAsync(int userId);

    /// <summary>
    /// Получает пользователя по логину
    /// </summary>
    /// <param name="login">Логин пользователя</param>
    /// <returns>Модель пользователя или null, если пользователь не найден</returns>
    Task<User> GetUserByLoginAsync(string login);

    /// <summary>
    /// Проверяет, имеет ли пользователь указанную роль
    /// </summary>
    /// <param name="userId">Идентификатор пользователя</param>
    /// <param name="role">Роль для проверки</param>
    /// <returns>Признак соответствия роли</returns>
    Task<bool> HasRoleAsync(int userId, UserRole role);
}

//IWarehouseService.cs
using RequestManagement.Common.Models;

namespace RequestManagement.Common.Interfaces;

public interface IWarehouseService
{
    Task<List<Warehouse>> GetAllWarehousesAsync(string filter = "");
    Task<Warehouse> GetOrCreateWarehousesAsync(string filter);
    Task<int> CreateWarehouseAsync(Warehouse warehouse);
    Task<bool> UpdateWarehouseAsync(Warehouse warehouse);
    Task<bool> DeleteWarehouseAsync(int id);
}

//Application.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models
{
    public class Application : IEntity
    {
        public int Id { get; set; }
        public string Number { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public Driver? Responsible { get; set; }
        public int ResponsibleId { get; set; }
        public Equipment? Equipment { get; set; }
        public int EquipmentId { get; set; }
    }
}


//Commissions.cs
using RequestManagement.Common.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models
{
    public class Commissions : IEntity
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int ApproveForActId { get; set; }
        public Driver? ApproveForAct { get; set; } = null;
        public int ApproveForDefectAndLimitId { get; set; }
        public Driver? ApproveForDefectAndLimit { get; set; } = null;
        public int ChairmanId { get; set; }
        public Driver? Chairman { get; set; }
        public int Member1Id { get; set; }
        public Driver? Member1 { get; set; }
        public int Member2Id { get; set; }
        public Driver? Member2 { get; set; }
        public int Member3Id { get; set; }
        public Driver? Member3 { get; set; }
        public int Member4Id { get; set; }
        public Driver? Member4 { get; set; }
    }
}


//Defect.cs
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

public class Defect : IEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public int DefectGroupId { get; set; }      // Группа дефекта (внешний ключ)
    public DefectGroup DefectGroup { get; set; }
}

//DefectGroup.cs
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

public class DefectGroup : IEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public List<Defect> Defects { get; set; } = [];
}

//Driver.cs
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

public class Driver : IEntity
{
    public int Id { get; set; }
    public string FullName { get; set; } = string.Empty;
    public string ShortName { get; set; } = string.Empty;
    public string Position { get; set; } = string.Empty;
    public string Code { get; set; } = string.Empty;
}

//Equipment.cs
using RequestManagement.Common.Models.Interfaces;
using System.ComponentModel.DataAnnotations.Schema;

namespace RequestManagement.Common.Models;

/// <summary>
/// Модель единицы техники (назначения) для заявки
/// </summary>
public class Equipment : IEntity
{
    /// <summary>
    /// Уникальный идентификатор единицы техники
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    /// Название единицы техники
    /// </summary>
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Государственный номер (может отсутствовать)
    /// </summary>
    public string? StateNumber { get; set; } = string.Empty;

    [NotMapped]
    public string FullName
    {
        get
        {
            if (Name != "" && !string.IsNullOrEmpty(StateNumber))
            {
                return $"{Name}({StateNumber})";
            }

            if (Name != "" && string.IsNullOrEmpty(StateNumber))
            {
                return Name;
            }

            return "";
        }
    }
    public string Code { get; set; } = string.Empty;
}

//Expense.cs
using RequestManagement.Common.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models
{
    public class Expense : IEntity
    {
        [NotMapped] public bool IsSelected { get; set; }
        public int Id { get; set; }
        public string? Code { get; set; } = string.Empty;
        public int StockId { get; set; }
        public Stock Stock { get; set; } = null!;
        public decimal Quantity { get; set; }
        public int? Term { get; set; }
        public int EquipmentId { get; set; }
        public Equipment Equipment { get; set; } = null!;
        public int DriverId { get; set; }
        public Driver Driver { get; set; } = null!;
        public int DefectId { get; set; }
        public Defect Defect { get; set; } = null!;
        public DateTime Date { get; set; }
    }
}


//Helpers.cs
namespace RequestManagement.Common.Models;

public static class Helpers
{
    public record QuantityFilter(decimal Value, ComparisonOperator Operator)
    {
        private static QuantityFilter GreaterThan(decimal value) => new(value, ComparisonOperator.GreaterThan);
        private static QuantityFilter EqualTo(decimal value) => new(value, ComparisonOperator.EqualTo);
        private static QuantityFilter LessThan(decimal value) => new(value, ComparisonOperator.LessThan);
        public static QuantityFilter? GetQuantityFilter(decimal value, int type) => type switch { 1 => EqualTo(value), 2 => GreaterThan(value), 3 => LessThan(value), _ => null };
    }

    public enum ComparisonOperator
    {
        GreaterThan,
        EqualTo,
        LessThan
    }
}

//Incoming.cs
using RequestManagement.Common.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models;
public class Incoming : IEntity
{
    [NotMapped]
    public bool IsSelected { get; set; }
    public int Id { get; set; }
    public int StockId { get; set; }
    public Stock Stock { get; set; } = null!;
    public decimal Quantity { get; set; }
    public DateTime Date { get; set; }
    public string DocType { get; set; } = string.Empty;
    public string Code { get; set; } = string.Empty;
    public Application? Application { get; set; }
    public int ApplicationId { get; set; }
}


//MaterialExpense.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models
{
    public class MaterialExpense
    {
        public string Number { get; set; }
        public DateTime Date { get; set; }
        public string DriverFullName { get; set; }
        public string DriverCode { get; set; }
        public string EquipmentName { get; set; }
        public string EquipmentCode { get; set; }
        public string NomenclatureName { get; set; }
        public string NomenclatureCode { get; set; }
        public string NomenclatureArticle { get; set; } 
        public string NomenlatureUnitOfMeasure { get; set; }
        public decimal Quantity { get; set; }
    }
}


//MaterialIncoming.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WpfClient.Models;

namespace RequestManagement.Common.Models
{
    public class MaterialIncoming
    {
        public string? WarehouseName { get; set; }
        public List<MaterialIncomingItem> Items { get; set; }
    }

    public class MaterialIncomingItem
    {
        public string RegistratorType { get; set; }
        public string RegistratorNumber { get; set; }
        public string RegistratorDate { get; set; }
        public string ReceiptOrderNumber { get; set; }
        public string ReceiptOrderDate { get; set; }
        public string ApplicationNumber { get; set; }
        public string ApplicationDate { get; set; } 
        public string ApplicationResponsibleName { get; set; }
        public string ApplicationEquipmentName { get; set; }
        public string ApplicationEquipmentCode { get; set; }
        public List<MaterialStock> Items { get; set; }
    }
}


//MaterialStock.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfClient.Models
{
    public class MaterialStock
    {
        public string ItemName { get; set; }
        public string Code { get; set; }
        public string Article { get; set; }
        public string Unit { get; set; }
        public double FinalBalance { get; set; }
    }
}


//Nomenclature.cs
using RequestManagement.Common.Models.Interfaces;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace RequestManagement.Common.Models;

public class Nomenclature : IEntity
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }
    public string Code { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public string? Article { get; set; } = string.Empty;
    public string UnitOfMeasure { get; set; } = string.Empty;
    public List<Stock> Stocks { get; set; } = []; // Связь один-ко-многим
}

//NomenclatureAnalog.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models
{
    public class NomenclatureAnalog : IEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public Nomenclature Original { get; set; }
        public int OriginalId { get; set; }
        public Nomenclature Analog { get; set; }
        public int AnalogId { get; set; }
    }
}


//NomenclatureDefectMapping.cs
using RequestManagement.Common.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models
{
    public class NomenclatureDefectMapping : IEntity
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public User User { get; set; } = null!;
        public int NomenclatureId { get; set; }
        public Nomenclature Nomenclature { get; set; } = null!;
        public int DefectId { get; set; }
        public Defect Defect { get; set; } = null!;
        public DateTime LastUsed { get; set; }
        public int Term { get; set; }
    }
}


//Stock.cs
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

public class Stock : IEntity
{
    public int Id { get; set; }
    public int WarehouseId { get; set; }
    public Warehouse Warehouse { get; set; } = null!; // Внешний ключ на таблицу Warehouse
    public int NomenclatureId { get; set; }
    public Nomenclature Nomenclature { get; set; } = null!; // Внешний ключ на таблицу Nomenclature
    public decimal InitialQuantity { get; set; } // Начальное количество
    public decimal ReceivedQuantity { get; set; } // Количество поступления
    public decimal ConsumedQuantity { get; set; }
    public decimal FinalQuantity => InitialQuantity + ReceivedQuantity - ConsumedQuantity;
}

//User.cs
using RequestManagement.Common.Models.Enums;
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

/// <summary>
/// Модель пользователя системы
/// </summary>
public class User : IEntity
{
    /// <summary>
    /// Уникальный идентификатор пользователя
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    /// Логин пользователя
    /// </summary>
    public string Login { get; set; }

    /// <summary>
    /// Пароль пользователя (хранится в зашифрованном виде)
    /// </summary>
    public string Password { get; set; }

    /// <summary>
    /// Роль пользователя в системе
    /// </summary>
    public UserRole Role { get; set; }
}

//UserLastSelection.cs
using RequestManagement.Common.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models
{
    public class UserLastSelection : IEntity
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public User? User { get; set; }
        public int? DriverId { get; set; }
        public Driver? Driver { get; set; }
        public int? EquipmentId { get; set; }
        public Equipment? Equipment { get; set; }
        public int? CommissionsId { get; set; }
        public Commissions? Commissions { get; set; }
        public DateTime LastUpdated { get; set; }
    }
}


//Warehouse.cs
using RequestManagement.Common.Models.Interfaces;

namespace RequestManagement.Common.Models;

public class Warehouse : IEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? Code { get; set; } = string.Empty;
    public DateTime LastUpdated { get; set; }
    // Другие поля склада, если нужно
    public List<Stock> Stocks { get; set; } = []; // Связь один-ко-многим
}

//ExcelHelpers.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Text;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Windows.Networking;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.InteropServices.JavaScript.JSType;
using Font = System.Drawing.Font;

namespace RequestManagement.Common.Utilities
{
    public static class ExcelHelpers
    {
        public static string GetSafeSheetName(string name)
        {
            // Удаляем недопустимые символы и обрезаем до 31 символа
            var invalidChars = Path.GetInvalidFileNameChars().Concat(['[', ']', '*', '?', '/', '\\']);
            name = invalidChars.Aggregate(name, (current, c) => current.Replace(c, '_'));
            return name.Length > 31 ? name[..31] : name;
        }

        public static double GetRowHeight(double columnWidth, string fontName, float fontSize, string text,float rowHeight = 13.25f)
        {
            const float pixelsPerExcelColumn = 6.11f;
            var columnWidthInPixels = (float)(columnWidth * pixelsPerExcelColumn)/1.01f;
            var lineCount =  GetLineCount(columnWidthInPixels, fontName, fontSize, text, rowHeight);
            return lineCount * rowHeight;
        }
        private static int GetLineCount(double columnWidth, string fontName, float fontSize, string text, float rowHeight)
        {
            using var bmp = new Bitmap(1, 1);
            using var g = Graphics.FromImage(bmp);
            g.TextRenderingHint = TextRenderingHint.AntiAlias;
            var font = new Font(fontName, fontSize);
            var maxSize = new SizeF((float)columnWidth, 1000f);
            var format = new StringFormat(StringFormatFlags.LineLimit);
            format.Trimming = StringTrimming.Word;
            var textSize = g.MeasureString(text, font, maxSize, format);
            var lineCount = (int)Math.Ceiling(textSize.Height / rowHeight);
            return lineCount;
        }
    }
}


//NameFormatter.cs
namespace RequestManagement.Common.Utilities
{
    public static class NameFormatter
    {
        /// <summary>
        /// Преобразует полное имя (например, "Иванов Иван Иванович", "Иванов Иван" или "Иванов Иван Угли")
        /// в сокращённую запись (например, "Иванов И.И." или "Иванов И."). 
        /// Отчество необязательно, дополнительные части после имени или отчества игнорируются.
        /// </summary>
        /// <param name="fullName">Полное имя, состоящее из 2 или более частей, разделённых пробелами.</param>
        /// <returns>Сокращённая запись имени (например, "Иванов И.И." или "Иванов И.") или null, если входные данные некорректны.</returns>
        public static string FormatToShortName(string? fullName)
        {
            // Проверка на null или пустую строку
            if (string.IsNullOrWhiteSpace(fullName))
            {
                return "";
            }

            // Разделяем имя на части, игнорируя множественные пробелы
            var parts = fullName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);

            // Проверяем, что есть минимум 2 части (фамилия и имя)
            if (parts.Length < 2)
            {
                return "";
            }

            // Извлекаем фамилию и имя
            var surname = parts[0];
            var firstName = parts[1];

            // Проверяем, что фамилия и имя не пустые
            if (string.IsNullOrEmpty(surname) || string.IsNullOrEmpty(firstName))
            {
                return "";
            }

            // Формируем сокращённую запись
            // Если есть отчество (3 или более частей), добавляем его инициал
            if (parts.Length >= 3 && !string.IsNullOrEmpty(parts[2]))
            {
                var patronymic = parts[2];
                return $"{surname} {firstName[0]}.{patronymic[0]}.";
            }

            // Если отчества нет, возвращаем только инициал имени
            return $"{surname} {firstName[0]}.";
        }
    }
}

//UserRole.cs
namespace RequestManagement.Common.Models.Enums;

/// <summary>
/// Перечисление ролей пользователей
/// </summary>
public enum UserRole
{
    /// <summary>
    /// Администратор с полными правами
    /// </summary>
    Administrator = 0,

    /// <summary>
    /// Пользователь с ограниченными правами
    /// </summary>
    User = 1,

    /// <summary>
    /// Наблюдатель с правами только на чтение
    /// </summary>
    Observer = 2
}

//ObjectExtensions.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace RequestManagement.Common.Models.Extensions
{
    public static class ObjectExtensions
    {
        public static T Clone<T>(this T obj)
        {
            if (obj is null)
                return default!;

            var options = new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.IgnoreCycles,
                IncludeFields = true,
                PropertyNameCaseInsensitive = true,
                WriteIndented = false
            };

            var json = JsonSerializer.Serialize(obj, options);
            return JsonSerializer.Deserialize<T>(json, options)!;
        }
    }
}


//IEntity.cs
namespace RequestManagement.Common.Models.Interfaces
{
    public interface IEntity
    {
        public int Id { get; set; }
    }
}


