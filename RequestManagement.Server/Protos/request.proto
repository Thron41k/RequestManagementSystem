syntax = "proto3";

option csharp_namespace = "RequestManagement.Server.Controllers";

import "google/protobuf/timestamp.proto";

service RequestService {
    // Методы для работы с оборудованием
    rpc GetAllEquipment (GetAllEquipmentRequest) returns (GetAllEquipmentResponse);
    rpc CreateEquipment (CreateEquipmentRequest) returns (CreateEquipmentResponse);
    rpc UpdateEquipment (UpdateEquipmentRequest) returns (UpdateEquipmentResponse);
    rpc DeleteEquipment (DeleteEquipmentRequest) returns (DeleteEquipmentResponse);

    rpc GetAllDrivers (GetAllDriversRequest) returns (GetAllDriversResponse);
    rpc CreateDriver (CreateDriverRequest) returns (CreateDriverResponse);
    rpc UpdateDriver (UpdateDriverRequest) returns (UpdateDriverResponse);
    rpc DeleteDriver (DeleteDriverRequest) returns (DeleteDriverResponse);

    rpc GetAllDefectGroups (GetAllDefectGroupsRequest) returns (GetAllDefectGroupsResponse);
    rpc CreateDefectGroup (CreateDefectGroupRequest) returns (CreateDefectGroupResponse);
    rpc UpdateDefectGroup (UpdateDefectGroupRequest) returns (UpdateDefectGroupResponse);
    rpc DeleteDefectGroup (DeleteDefectGroupRequest) returns (DeleteDefectGroupResponse);

    rpc GetAllDefects (GetAllDefectsRequest) returns (GetAllDefectsResponse);
    rpc CreateDefect(CreateDefectRequest) returns (CreateDefectResponse);
    rpc UpdateDefect (UpdateDefectRequest) returns (UpdateDefectResponse);
    rpc DeleteDefect (DeleteDefectRequest) returns (DeleteDefectResponse);
}

// Сообщения для оборудования
message GetAllEquipmentRequest {
    string filter = 1;
}

message GetAllEquipmentResponse {
    repeated Equipment equipment = 1;
}

message CreateEquipmentRequest {
    string name = 1;
    string license_plate = 2;
}

message CreateEquipmentResponse {
    int32 id = 1;
}

message UpdateEquipmentRequest {
    int32 id = 1;
    string name = 2;
    string license_plate = 3;
}

message UpdateEquipmentResponse {
    bool success = 1;
}

message DeleteEquipmentRequest {
    int32 id = 1;
}

message DeleteEquipmentResponse {
    bool success = 1;
}

message Equipment {
    int32 id = 1;
    string name = 2;
    string license_plate = 3;
}

message GetAllDriversRequest {
    string filter = 1; // Фильтр для поиска по имени или должности
}

message GetAllDriversResponse {
    repeated Driver drivers = 1;
}

message CreateDriverRequest {
    Driver driver = 1;
}

message CreateDriverResponse {
    int32 id = 1; // ID созданного водителя
}

message UpdateDriverRequest {
    Driver driver = 1;
}

message UpdateDriverResponse {
    bool success = 1;
}

message DeleteDriverRequest {
    int32 id = 1;
}

message DeleteDriverResponse {
    bool success = 1;
}

message Driver {
    int32 id = 1;
    string full_name = 2;   // Полное ФИО
    string short_name = 3;  // Фамилия с инициалами
    string position = 4;    // Должность
}

message GetAllDefectGroupsRequest {
    string filter = 1;
}

message GetAllDefectGroupsResponse {
    repeated DefectGroup defectGroup = 1;
}

message CreateDefectGroupRequest {
    DefectGroup defectGroup = 1;
}

message CreateDefectGroupResponse {
    int32 id = 1;
}

message UpdateDefectGroupRequest {
    DefectGroup defectGroup = 1;
}

message UpdateDefectGroupResponse {
    bool success = 1;
}

message DeleteDefectGroupRequest {
    int32 id = 1;
}

message DeleteDefectGroupResponse {
    bool success = 1;
}

message DefectGroup {
    int32 id = 1;
    string name = 2;   
}

message GetAllDefectsRequest {
    string filter = 1;
}

message GetAllDefectsResponse {
    repeated Defect Defect = 1;
}

message CreateDefectRequest {
    Defect Defect = 1;
}

message CreateDefectResponse {
    int32 id = 1;
}

message UpdateDefectRequest {
    Defect Defect = 1;
}

message UpdateDefectResponse {
    bool success = 1;
}

message DeleteDefectRequest {
    int32 id = 1;
}

message DeleteDefectResponse {
    bool success = 1;
}

message Defect {
    int32 id = 1;
    string name = 2;
    int32 defectGroupId = 3;
}