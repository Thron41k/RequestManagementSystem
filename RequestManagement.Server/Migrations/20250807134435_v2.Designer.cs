// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RequestManagement.Server.Data;

#nullable disable

namespace RequestManagement.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807134435_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RequestManagement.Common.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("Number");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EquipmentId = 1,
                            Number = "",
                            ResponsibleId = 1
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Commissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproveForActId")
                        .HasColumnType("integer");

                    b.Property<int>("ApproveForDefectAndLimitId")
                        .HasColumnType("integer");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChairmanId")
                        .HasColumnType("integer");

                    b.Property<int>("Member1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Member2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Member3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Member4Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApproveForActId");

                    b.HasIndex("ApproveForDefectAndLimitId");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("Member1Id");

                    b.HasIndex("Member2Id");

                    b.HasIndex("Member3Id");

                    b.HasIndex("Member4Id");

                    b.HasIndex("Name");

                    b.ToTable("Commissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproveForActId = 1,
                            ApproveForDefectAndLimitId = 1,
                            BranchName = "",
                            ChairmanId = 1,
                            Member1Id = 1,
                            Member2Id = 1,
                            Member3Id = 1,
                            Member4Id = 1,
                            Name = "Могочинский филиал АО \"Труд\""
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Defect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DefectGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DefectGroupId");

                    b.HasIndex("Name");

                    b.ToTable("Defects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefectGroupId = 1,
                            Name = ""
                        },
                        new
                        {
                            Id = 2,
                            DefectGroupId = 14,
                            Name = "Замена АКБ"
                        },
                        new
                        {
                            Id = 3,
                            DefectGroupId = 13,
                            Name = "Замена автошин"
                        },
                        new
                        {
                            Id = 4,
                            DefectGroupId = 16,
                            Name = "Передача в эксплуатацию"
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.DefectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DefectGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = ""
                        },
                        new
                        {
                            Id = 2,
                            Name = "Выпускная система"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Гидравлика"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ДВС"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Коробка раздаточная"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Кузов, кабина"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Механизмы управления"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Рабочее оборудование"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Система охлаждения"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Сцепление"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Топливная система"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Трансмиссия"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ходовая часть"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Электрооборудование"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Расходные материалы"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Передача в эксплуатацию"
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            FullName = "",
                            Position = "",
                            ShortName = ""
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("EquipmentGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("StateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("EquipmentGroupId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            Name = "",
                            ShortName = "",
                            StateNumber = ""
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.EquipmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentGroups");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.Property<int?>("Term")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("DefectId");

                    b.HasIndex("DriverId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("StockId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Incoming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("InWarehouseId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Date");

                    b.HasIndex("InWarehouseId");

                    b.HasIndex("StockId");

                    b.ToTable("Incomings");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.MaterialsInUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateForWriteOff")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DocumentNumberForWriteOff")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FinanciallyResponsiblePersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOut")
                        .HasColumnType("boolean");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ReasonForWriteOffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FinanciallyResponsiblePersonId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("ReasonForWriteOffId");

                    b.ToTable("MaterialsInUse");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Nomenclature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Article")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Nomenclatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Article = "",
                            Code = "",
                            Name = "",
                            UnitOfMeasure = ""
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.NomenclatureAnalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalogId")
                        .HasColumnType("integer");

                    b.Property<int>("OriginalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnalogId");

                    b.HasIndex("OriginalId", "AnalogId");

                    b.ToTable("NomenclatureAnalogs");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.NomenclatureDefectMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DefectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<int>("Term")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("UserId", "NomenclatureId");

                    b.ToTable("NomenclatureDefectMappings");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.ReasonsForWritingOffMaterialsFromOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Reason");

                    b.ToTable("ReasonsForWritingOffMaterialsFromOperation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Reason = ""
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.SparePartsOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("EquipmentGroupId", "NomenclatureId")
                        .IsUnique();

                    b.ToTable("SparePartsOwnerships");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ConsumedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("WarehouseId", "NomenclatureId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "$2a$11$IeKuyvG/5SoDYP0NFz3kouC3CPUIuUa6ShTfgVVf9oUlfqbXq8LrC",
                            Role = 0
                        });
                });

            modelBuilder.Entity("RequestManagement.Common.Models.UserLastSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommissionsId")
                        .HasColumnType("integer");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("DriverId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLastSelections");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FinanciallyResponsiblePersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FinanciallyResponsiblePersonId");

                    b.HasIndex("Name");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Application", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Driver", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Commissions", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Driver", "ApproveForAct")
                        .WithMany()
                        .HasForeignKey("ApproveForActId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "ApproveForDefectAndLimit")
                        .WithMany()
                        .HasForeignKey("ApproveForDefectAndLimitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Chairman")
                        .WithMany()
                        .HasForeignKey("ChairmanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Member1")
                        .WithMany()
                        .HasForeignKey("Member1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Member2")
                        .WithMany()
                        .HasForeignKey("Member2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Member3")
                        .WithMany()
                        .HasForeignKey("Member3Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Member4")
                        .WithMany()
                        .HasForeignKey("Member4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApproveForAct");

                    b.Navigation("ApproveForDefectAndLimit");

                    b.Navigation("Chairman");

                    b.Navigation("Member1");

                    b.Navigation("Member2");

                    b.Navigation("Member3");

                    b.Navigation("Member4");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Defect", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.DefectGroup", "DefectGroup")
                        .WithMany("Defects")
                        .HasForeignKey("DefectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefectGroup");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Equipment", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.EquipmentGroup", "EquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EquipmentGroup");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Expense", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("Driver");

                    b.Navigation("Equipment");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Incoming", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Warehouse", "InWarehouse")
                        .WithMany()
                        .HasForeignKey("InWarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RequestManagement.Common.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("InWarehouse");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.MaterialsInUse", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Driver", "FinanciallyResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("FinanciallyResponsiblePersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.ReasonsForWritingOffMaterialsFromOperation", "ReasonForWriteOff")
                        .WithMany()
                        .HasForeignKey("ReasonForWriteOffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("FinanciallyResponsiblePerson");

                    b.Navigation("Nomenclature");

                    b.Navigation("ReasonForWriteOff");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.NomenclatureAnalog", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Analog")
                        .WithMany()
                        .HasForeignKey("AnalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Analog");

                    b.Navigation("Original");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.NomenclatureDefectMapping", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("Nomenclature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.RefreshToken", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.SparePartsOwnership", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.EquipmentGroup", "EquipmentGroup")
                        .WithMany("SparePartsOwnerships")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Nomenclature")
                        .WithMany("SparePartsOwnerships")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");

                    b.Navigation("Nomenclature");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Stock", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Nomenclature", "Nomenclature")
                        .WithMany("Stocks")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagement.Common.Models.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.UserLastSelection", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagement.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("Driver");

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Warehouse", b =>
                {
                    b.HasOne("RequestManagement.Common.Models.Driver", "FinanciallyResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("FinanciallyResponsiblePersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FinanciallyResponsiblePerson");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.DefectGroup", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.EquipmentGroup", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("SparePartsOwnerships");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Nomenclature", b =>
                {
                    b.Navigation("SparePartsOwnerships");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("RequestManagement.Common.Models.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
